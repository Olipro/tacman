### to dump exception backtrace use error.backtrace.join("\n")
### curl -i -X POST -d manager[base_url]=https://localhost:3001/managers http://localhost:3000/managers/register
### script/plugin install acts_as_list
### gem install mislav-will_paginate --source http://gems.github.com/
### gem install chronic packet
### rake gems:install
### rake gems:unpack GEM=hpricot


features & bugs
---------------

* test desire_start
* uncomment cronjob on sat2 box



* script to port users, etc...
User.find(:all, :conditions => "disabled = false", :order => :username).each {|u| puts "#{u.username}, #{u.hashed_password}, #{u.hashed_enable}, #{u.salt}, #{u.first_name} #{u.last_name}, #{u.email}, #{u.department}\n"}

NetworkObjectGroup.find(:all).each do |nog|
    str = "# #{nog.configuration.name}\nnetwork-object-group #{nog.name.gsub(' ', '_').gsub('-', '_')}\n"
    nog.network_object_group_entries.each {|e| str << "  #{e.network}\n"}
    puts str + "\n"
end

ShellCommandObjectGroup.find(:all).each do |scog|
    str = "# #{scog.configuration.name}\nshell-command-object-group #{scog.name.gsub(' ', '_').gsub('-', '_')}\n"
    scog.shell_command_object_group_entries.each {|e| str << "  #{e.command}\n"}
    puts str + "\n"
end

Acl.find(:all).each do |acl|
    str = "# #{acl.configuration.name}\naccess-list #{acl.name.gsub(' ', '_').gsub('-', '_')}\n"
    acl.acl_entries.each do |e|
        if (e.ip?)
            str << "  #{e.permission} ip #{e.ip} #{e.wildcard_mask}\n"
        else
            str << "  #{e.permission} network-object-group #{e.network_object_group.name.gsub(' ', '_').gsub('-', '_')}\n"
        end
    end
    puts str + "\n"
end

AuthorAvpair.find(:all).each do |av|
    str = "# #{av.configuration.name}\n"
    av.author_avpair_entries.each do |e|
        str << "author-avpair-list #{av.name.gsub(' ', '_').gsub('-', '_')}\n"
        str << "  match #{e.acl.name.gsub(' ', '_').gsub('-', '_')}\n"
        e.avpairs.each {|x| str << "  set #{x.avpair}\n" }
        str << "\n"
    end
    puts str + "\n"
end

CommandAuthorizationProfile.find(:all).each do |cap|
    str = "# #{cap.configuration.name}\ncommand-authorization-profile #{cap.name.gsub(' ', '_').gsub('-', '_')}\n"
    cap.command_authorization_profile_entries.each do |e|
        if (e.command?)
            str << "  command /#{e.command}/ access-list #{e.acl.name.gsub(' ', '_').gsub('-', '_')}\n"
        else
            str << "  shell-command-object-group #{e.shell_command_object_group.name.gsub(' ', '_').gsub('-', '_')} access-list #{e.acl.name.gsub(' ', '_').gsub('-', '_')}\n"
        end
    end
    puts str + "\n"
end

ConfiguredUser.find(:all).each do |cu|
    str = "username=#{cu.user.username}\tconfiguration=#{cu.configuration.name}\trole=#{cu.user_role}\t"
    str << "user_group=#{cu.user_group.name}\t" if (cu.user_group_id)
    str << "av=#{cu.author_avpair.name}\t" if (cu.author_avpair_id)
    str << "cap=#{cu.command_authorization_profile.name}\t" if (cu.command_authorization_profile_id)
    str << "lacl=#{cu.login_acl.name}\t" if (cu.login_acl_id)
    str << "eacl=#{cu.enable_acl.name}\t" if (cu.enable_acl_id)
    puts str + "\n"
end



users = {}
User.find(:all).each {|u| users[u.username] = u}

configurations = {}
Configuration.find(:all).each {|x| configurations[x.name] = x}

File.open(ARGV[0]).each_line do |line|
    user = nil
    configuration = nil
    attrs = {:is_active => true}
    line.split("\t").each do |part|
        field,val = part.split('=')
        user = users[val] if (field == 'username')
        configuration = configurations[val] if (field == 'configuration')

        if (field == 'role')
            if (val == 'admin')
                attrs[:role] = 'admin'
            elsif (val == 'viewer')
                attrs[:role] = 'viewer'
            else
                attrs[:role] = 'user'
            end
        end

        if (field == 'user_group')
            attrs[:user_group_id] = configuration.user_groups.find(:first, :conditions => "name = '#{val}'").id
        end

        if (field == 'av')
            attrs[:author_avpair_id] = configuration.author_avpairs.find(:first, :conditions => "name = '#{val}'").id
        end

        if (field == 'cap')
            attrs[:command_authorization_profile_id] = configuration.command_authorization_profiles.find(:first, :conditions => "name = '#{val}'").id
        end

        if (field == 'lacl')
            attrs[:login_acl_id] = configuration.acls.find(:first, :conditions => "name = '#{val}'").id
        end

        if (field == 'eacl')
            attrs[:enable_acl_id] = configuration.acls.find(:first, :conditions => "name = '#{val}'").id
        end
    end

    cu = ConfiguredUser.build(attrs)
    cu.user_id = user.id
    cu.configuration_id = configuration.id
    cu.save
end


tests & doc
-----------

* hash out xml views

* tests for slave system restrictions

* test write_remote_inbox with and without backgroundrb started

* make sure un-approved or suspended users arent written to td config file