<h3><a name="system_overview" style="color: #000000;">System Overview</a></h3>

<p>
The TacacsPlus Manager acts as a central management portal for managing user accounts and TACACS+ daemons.
On the front end the system comprises of a web UI which is meant to ease the task of system administration. The
back end consists of a stand-alone TACACS+ daemon script (lib/tacacs_plus_server.rb) which executes configuration
files generated by the front end.
</p>

<p>
The system may be set up in one of three modes: stand-alone, master, or slave. Stand-alone systems are
meant for small deployments which involve only a single system, while a master/slave setup is meant for larger
deployoments where redundant systems or geographically separate systems are required.
In a master/slave setup a single master is athorative for multiple slaves.
</p>

<br /><br />


<h3><a name="system_components" style="color: #000000;">System Components</a></h3>

<p>
The system comprises of four major components:
<ul>
  <li><b>Users</b></li>
  <li><b>Departments</b></li>
  <li><b>TACACS+ Daemons</b></li>
  <li><b>Configurations</b></li>
</ul>
</p>

<br />

<h4><u>Users</u></h4>
<p>
There are 3 types of user roles in the system:
<ul>
  <li>admistrators</li>
  <li>user administrators</li>
  <li>standard users</li>
</ul>
Standard users may only log into the system and change their passwords.
<br />
User administrators may perform basic administration of user accounts within the system. They may manually
add users to configurations, add/remove accounts, reset passwords, and enable/disable accounts. They may not
change the role of users within the system.
<br />
Administrators have the ability to manage the entire system.

<p>
Each user within the system will have their own login and enable passwords. Each of these passwords will
have a lifespan which determines how long the password is valid before it must be changed. An additional
security feature on user accounts is the ability to disable web interface logins. This is useful
for non-human accounts which should not normally accessed through the web interface.
</p>

<p>
For certain types of accounts, such as script accounts that do nothing but perform device configuration backups, you may want to disable
AAA log import into the database. This is useful if the account generates a lot of uninteresting logs. Although disabling
AAA log import will prevent the logs from being imported into the database, the logs will still be archived by the system.
</p>

<br />

<h4><u>Departments</u></h4>
<p>
Departments are used to define a loose administrative boundary for user accounts and configurations. The most
practical use of a department is to filter the list of available usernames which are viewable by a configuration
administrator. For example, assume that I create user1 as a member of department Dept1 and user2 as a member of
Dept2. I then create a configuration belonging to Dept1. As an administrator of this configuration, only the
user1 account would be visible to me (user2 would be hidden). Of course, any system admin or user_admin would
be able to manually add user2 to this configuration.
</p>

<br />

<h4><u>TACACS+ Daemons</u></h4>
<p>
TACACS+ Daemons represent actual instances of the daemons on the system. They will have a few unique
attributes such as IP and port but will derive most of their setup from the configuration to which they
subscribe. TACACS+ Daemons may either run on the local system or may be configured to run on remote systems
(in the case of a master/slave setup).
</p>

<br />

<h4><u>Configurations</u></h4>
<p>
Configurations make up the most complex part of the system. They will define what user accounts are
added to what TACACS+ daemons, and what permissions those users have on those daemons.
As users are added to configurations, they will be granted one of 3 roles within that configuration:
<ul>
  <li>admistrator</li>
  <li>viewer</li>
  <li>standard user</li>
</ul>
Standard users may not interact with the configuration in any way. They are simply part of it.<br />
Viewers may view the configuration and any logs within that configuration.<br />
Administrators may make modifications to the configuration as well as start/stop TACACS+ daemons
which subscribe to that configuration.
</p>

<p>
There are several elements available for use within a configuration:
<ul>
  <li>
    <b>shell-command-object groups</b> - Contain lists of shell commands as regular expressions.
  </li>
  <li>
    <b>network-object-groups</b> - Contain list of IP blocks in CIDR format.
  </li>
  <li>
    <b>access-lists</b> - Define access controls for various tasks by permitting or denying based on source IP of the clients.
    They have an implicit deny at the end.
  </li>
  <li>
    <b>author-avpair-lists</b> - Define the shell settings a user is granted upon login to specific devices.
  </li>
  <li>
    <b>command-authorization-profiles</b> - Define the shell commands a user may run, and from which devices they may run them.
    They have an implicit deny at the end.
  </li>
  <li>
    <b>command-authorization whitelists</b> - Authorization for any command listed here will always pass regardless
    of the user who is requesting the authorization. This essentially bypasses normal authorization proceedures, thus it is useful for basic
    commands such as 'login' or 'exit' which should always be available to all users (very useful for situations where you find
    yourself locked out of a device due to AAA Authentication errors)
  </li>
  <li>
    <b>user-groups</b> - Allows various settings to be granted to a collection of users.
  </li>
</ul>
</p>

<br />

<h3><a name="system_configuration" style="color: #000000;">System Configuration</a></h3>

<h4><u>System Settings</u></h4>
<p>
Basic system configuration may be performed by clicking on the <i>System</i> menu on the top nav bar.
Below is a description of each setting:
<ul>
  <li>Serial - a unique identifier assigned to each system</li>
  <li>Name - a human readable name for the system</li>
  <li>URL - the base url used for web services requests when a master/slave setup is used</li>
  <li>Pagination:entries per page - how many entries to show on index pages (such as when viewing logs)</li>
  <li>Inactive Users: disable after - how long a user may go without logging in before their account is disabled</li>
  <li>System Logs: Retain System Log For - how many days to keep logs in the database</li>
  <li>System Logs: Archive System Log For - how many days to keep archive files</li>
  <li>AAA Logs: same as for system logs</li>
  <li>Passwords - used for password restrictions</li>
  <li>ACL/Network-Object-Group Lengths - used to restrict the length of acls and object groups.</li>
  <li>Mailer - used to enable disable email from the system</li>
</ul>
</p>

<br />

<h4><u>Master/Slave Setups</u></h4>
<p>
<b>Registration</b><br />
In order for masters and slaves to communicate, the slaves must register with the master. As part of the registration
process a unique serial number is assigned to the slave and a password is generated which will be used for authentication
between the systems. Registration is actually performed from the slave by clicking on the 'Master System' link and entering
the web services url for the master system (displayed from the system view on the master). In order to complete registration
a system administrator must approve the slave system from the master. At this point the master should send a system-sync
message to the slave thus completing the registration process.
</p>

<p>
<b>Messaging Overview</b><br />
When you configure 2 or more systems in a master/slave setup you implicitly enable the messaging system of TacacsPlus Manager.
Once the messaging system is enabled any changes which are made to the master system will be reliably delivered to the slave
systems. In turn, logs are delivered from the slaves to the master.
The message delivery process may be monitored through the Inbox, Outbox, and Unprocessable
queue views on the master or slave system. These queues will have a revision number which will guarantee that no messages have
been dropped during delivery. In the event of a revision mismatch between a master and slave a system re-sync will be performed.
A system re-sync may also be manually performed by the system administrator at any time.
</p>

<p>
<b>Message Delivery Process</b><br />
When a change is made to the master system a message is placed immediately into the outbox for the appropriate slave systems.
Placing a message into this queue causes a back end process to launch, which after a 30 second delay, attempts to deliver
the message to the slave. In order to prevent duplicate messages from being delivered this back end process locks the outbox
(uses a 30 minute lock) until processing is complete. The act of locking the outbox is an indicator to other instances of
the back end process that the outbox is already being processed. If for some reason the delivery process fails, the lock will
remain in effect for a full 30 minutes. This is a preventative measure to keep the master from constantly attempting to
deliver messages to an unreachable slave system. If for some reason an authentication error occurs between the master/slave
a log will be generated and the messaging will be disabled completely. Messaging may always be manually enabled/disabled by the system
administrator.
</p>

<p>
<b>Message Receipt Process</b><br />
When a message is delivered to the inbox of a remote system, a back end process is launched which will process the message.
Like outbox processing, a lock (15 minutes) will be placed on the inbox until processing is complete. If a message raises
errors during processing then a log is generated and the message is placed into the unprocessable queue for review by the
system administrator. If a slave system encounters an unprocessable message then it will request a system-sync from its
master.
</p>


<br />

<h4><u>BackgrounDRb</u></h4>
<p>
BackgrounDRb is the backend daemon responsible for performing maintenance on the system as well as for managing the processes
which monitor the messaging queue. It is very important that this daemon continue running while the TacacsPlus Manager
is in production mode. BackgrounDRb may be administered from the main system view.
</p>

<br />

<h3><a name="user_administration" style="color: #000000;">User Administration</a></h3>

<h4><u>New Accounts</u></h4>
<p>
When creating a new account you must provide, at minimum, a unique username. By default each new
user account will have auto-generated login and enable passwords which will be immediately expired
upon creation. If email is enabled on the system and an email address is provided for the user, then
their passwords will be mailed to them by the system. Users will be required to change their passwords
upon their first login.
</p>

<p>
After account creation additional actions may be taken from the user account details page. Such things
as user role and account enable/disable may be set from this page. Additionally, users may be added and
removed to configurations from this page. When a user is manually added to a configuration their profile
within that configuration is automatically suspended and must be manually activated by a configuration
administrator or a system administrator.
</p>

<br />


<h3><a name="tacacs_daemon_administration" style="color: #000000;">TACACS+ Daemon Administration</a></h3>

<p>
When creating TACACS+ Daemons a unique name and an IP/port must be provided. Additionally, a Manager must be
selected which will act as the owning system for this daemon. If no Manager is provided, then the daemon
will run on the local system. Before the daemon may be started it must subscribe to a configuration. After
a configuration is selected the daemon may be started/stopped by the configuration administrator.
</p>

<br />

<h3><a name="configuration_administration" style="color: #000000;">Configuration Administration</a></h3>

<h4><u>New Configurations</u></h4>
<p>
Configurations must be given a unique name on the system. Additionally, they may be assigned to a department.
When creating a new configuration a TACACS+ encryption key (used by any subscribing TACACS+ daemons) is auto generated.
Log retention (how long logs are searchable and how long they are archived) may be specified here, as well as
any custom prompts (for client systems that display prompts). The default policy defines how the system will handle
users with no Command Authorization Profile defined.
</p>

<h4><u>User Account Administration</u></h4>
<p>
From the configuration view users may be added by clicking the 'Add/Remove Users' link on the left nav. Users
are added/removed simply by checking/unchecking their name on the list. The only users that will be present in
this list are users which belong to the owning department of the configuration. If additional users need to be added
then they must be added manually by a system admin from that user's main view page.
</p>

<p>
Once a user is added to a configuration their account must be activated. This may be done from the 'View Users' link
on the left nav. It is highly recommended that the user be configured (placed into a user group or otherwise) before
enabling the user.
</p>

<h4><u>Publishing</u></h4>
<p>
Changes will need to be published in order to take effect on the TACACS+ daemons. The act of publishing
triggers a back end process, which after a 60 second delay, writes the changes to the daemon configuration
file and reloads the daemon. The purpose of a 60 second delay is to prevent a DoS situation where several
publish requests are sent consecutively to the system. Additionally, if the daemon resides on a slave system
then there will be an added 30 second delay while the messaging system writes the changes to the slave.
</p>

<br />

<h3><a name="troubleshooting" style="color: #000000;">Troubleshooting</a></h3>

<p>
<b>Problem:</b> My TACACS+ daemons fail to start.

<br /><br />

<b>Solution:</b> This could be the result of several things. However, here are a few things to check:
<ol>
  <li>Make sure that user apache owns all files within /var/tacman</li>
  <li>Make sure that your daemons are binding to IPs which actually exist on your server</li>
  <li>Make sure nothing else is bound to the IP/port for which the daemon is suppost to bind</li>
</ol>
</p>

<br />
<p>
<b>Problem:</b> Changes on the master system don't seem to propagate to the slaves.

<br /><br />

<b>Solution:</b> Make sure that BackgrounDRb is running on the master and the slave.
Check to see if the outbox is currently locked, and if there are any log entries which indicate communication issues
between the master and slave.
</p>

<br />
<p>
<b>Problem:</b> I changed my password, but I am unable to log in to devices which authenticate off of TACACS+

<br /><br />

<b>Solution:</b> Changes may take up to a minute and a half to propagate. If after a couple of minutes your changes
have not taken effect, then make sure that BackgrounDRb is still running. Additionally, make sure that you are actually
a part of the configuration for which the daemon subscribes (and that your account is enabled within the configuration).
</p>

<br />
<p>
<b>Problem:</b> How do I manually unlock the inbox/outbox?

<br /><br />

<b>Solution:</b> This involves manipulating the system from the CLI. Here are the steps:
<ol>
  <li>ssh to the system and cd to /var/tacman</li>
  <li>run the command '<code>script/console production</code>' and execute the below commands</li>
  <li><code>>> Manager.find_by_name('manager name here').unlock_outbox!</code></li>
  <li><code>>> Manager.find_by_name('manager name here').unlock_inbox!</code></li>
</ol>
</p>

<br />
<p>
<b>Problem:</b> How do I manually clear the inbox/outbox?

<br /><br />

<b>Solution:</b> You should only attempt this if something goes bad and your queue gets filled with junk. Here are the steps:
<ol>
  <li>ssh to the system and cd to /var/tacman</li>
  <li>run the command '<code>script/console production</code>' and execute the below commands</li>
  <li><code>>> m = Manager.find_by_name('manager name here')</code></li>
  <li><code>>> SystemMessage.destroy_all("manager_id = #{m.id} and queue='outbox'")</code></li>
  <li><code>>> SystemMessage.destroy_all("manager_id = #{m.id} and queue='inbox'")</code></li>
</ol>
</p>

<br />
<p>
<b>Problem:</b> How do I manually clean logs from the database.

<br /><br />

<b>Solution:</b> Normally this should be taken care of by BackgrounDRb, but if you need to do it manually...
<ol>
  <li>ssh to the system and cd to /var/tacman</li>
  <li>run the command '<code>script/console production</code>' and execute the below commands</li>
  <li><code>>> AaaLog.delete_all("timestamp < '2008-12-31 00:00:00'")</code></li>
  <li><code>>> SystemLog.delete_all("created_at < '2008-12-31 00:00:00'") </code></li>
</ol>
</p>

<br />
<p>
<b>Problem:</b> What steps do I need to do in order to completely shut down the system?

<br /><br />

<b>Solution:</b> Here are the steps:
<ol>
  <li>shut down all TACACS+ daemons</li>
  <li>stop BackgrounDRb</li>
  <li>stop apache (and optionally mysql)</li>
</ol>
To bring the system back, simply do the opposite.
</p>

<br /><br />
<p>
<b>Problem:</b> I locked myself out of the system. How do I get back in?

<br /><br />

<b>Solution:</b> You've encountered an ID10T error. Here are the steps for recovery:
<ol>
  <li>ssh to the system and cd to /var/tacman</li>
  <li>run the command '<code>script/console production</code>' and execute the below commands</li>
  <li><code>>> User.import('Recover, password, password')</code></li>
  <li><code>>> u = User.find_by_username('Recover')</code></li>
  <li><code>>> u.admin!</code></li>
  <li><code>>> u.toggle_password_expiry!</code></li>
</ol>
Login as user 'Recover' with password 'password'.
</p>

<br /><br />
<p>
<b>Problem:</b> When I reboot my server BackgrounDRB doesn't restart on its own. How to I correct this?

<br /><br />

<b>Solution:</b> You will want to write an init script to automatically start BackgrounDRB on system start.
   Here is a sample script:<br />
<textarea cols="100" rows="15" readonly="readonly">#!/bin/bash
#!/bin/bash
#
# /etc/rc.d/init.d/backgroundrb
#
# author: Chris Krough
#
# chkconfig: 345 88 12
# description:  Starts and stops backgroundrb process for Tacacs Plus
#
# processname: backgroundrb
#
# Source function library.
. /etc/init.d/functions

runuser=apache
backgroundrb=/var/tacman/script/backgroundrb

RETVAL=0

if [ ! -x $backgroundrb ]; then
    echo -n $"$backgroundrb does not exist."; warning; echo
    exit 5
fi

start() {
        echo -n $"Starting BackgroundRB Daemon: "
        daemon --user $runuser $backgroundrb start -e production
        RETVAL=$?
        echo
        [ $RETVAL -eq 0 ] && touch /var/lock/subsys/backgroundrb
        return $RETVAL
}

stop() {
        echo -n $"Stopping BackgroundRB Daemon: "
        # give backgroundrb a chance to stop gracefully
        $backgroundrb stop
        RETVAL=$?
        echo
        if [ $RETVAL -eq 0 ]; then
                rm -f /var/lock/subsys/backgroundrb
        fi
        return $RETVAL
}

# See how we were called.
case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo $"Usage: $0 {start|stop|restart}"
        ;;
esac
exit $RETVAL
</textarea>
</p>



<br /><br />

<h3><a name="installation_rhel5" style="color: #000000;">Installation (RHEL5)</a></h3>

    <p>
      <b>Install packages</b>

      </p><ol>
        <li> Su to root <br>
             <code>
               sudo su - <br />
               cd /tmp <br />
             </code>
        </li> <br>
        <li> Install packages <br>
             <code>
                   yum install subversion http openssl httpd-devel mod_ssl <br />
                   yum install httpd-devel mysql-server mysql-devel libxml2-devel <br />
                   yum install ruby ruby-devel ruby-libs ruby-irb ruby-rdoc ruby-tcltk subversion-ruby mysql-server mysql-devel gcc-c++ <br />
                <br />
                get the latest ruby build from <a href="http://rubyworks.rubyforge.org/installation/centos.html">here</a>
             </code>
        </li> <br>
        <li> Install RubyGems (http://rubyforge.org/projects/rubygems/)
          Setup MySQL<br />
          <code>
            /sbin/chkconfig mysqld on <br />
            service mysqld start <br />
            mysql_secure_installation <br />
          </code>
        </li> <br />
        <li> Install RubyGems (http://rubyforge.org/projects/rubygems/)<br />
          <code>
            wget http://rubyforge.org/frs/download.php/38646/rubygems-1.2.0.tgz <br />
            tar xzf rubygems-1.2.0.tgz <br />
            cd rubygems-1.2.0 <br />
            ruby setup.rb <br />
            cd .. <br />
            rm -rf rubygems-1.2.0* <br />
            gem update <br />
          </code>
        </li> <br>

        <li> Install required gems <br>
             <code>
               gem install rails --include-dependencies --no-rdoc --no-ri <br>
               gem install mongrel --include-dependencies --no-rdoc --no-ri <br>
               gem install capistrano --include-dependencies --no-rdoc --no-ri <br>
               gem install mislav-will_paginate --source http://gems.github.com/  --no-rdoc --no-ri <br>
               gem install chronic --no-rdoc --no-ri <br>
               gem install packet --no-rdoc --no-ri <br>
               gem install -v 1.5.0 netaddr --no-rdoc --no-ri <br>
               gem install -v 1.0.0 tacacs_plus  --no-rdoc --no-ri <br>
               <br />
               <b><i>64-bit RHEL 5</i></b><br />
               gem install mysql -- --with-mysql-dir=/usr/bin/ --with-mysql-lib=/usr/lib64/mysql/ --with-mysql-include=/usr/include/mysql/ <br>
               <br />
               <b><i>32-bit RHEL 5</i></b><br />
               gem install mysql -- --with-mysql-dir=/usr/bin/ --with-mysql-lib=/usr/lib/mysql/ --with-mysql-include=/usr/include/mysql/ <br>
             </code>
        </li> <br />

        <li> Install passenger <br>
             <code>
               gem install passenger <br>
               passenger-install-apache2-module <br>
             </code>
        </li> <br />
      </ol>

    <br>
    <p>
      <b>Install TacacsPlus Manager</b>
      </p><ol>
      <li>
        Checkout subversion repository<br>
        <code>
          cd /var <br />
          svn co http://tacacs-plus.rubyforge.org/svn/tacman/
        </code>
      </li><br>
      <li>
        Set up database<br>
        <code>
          mysql<br>
          create database tacman_production;<br>
          grant all privileges on tacman_production.* to 'apache'@'localhost' identified by 'password' with grant option;<br>
          quit
        </code>
      </li> <br>
      <li>
        Edit database.yml<br>
        <code>
          cd tacman <br />
          cp config/database.yml.tmpl config/database.yml<br><br>
         </code>
          <textarea cols="80" rows="7" readonly="readonly"># edit this section of the file to look like this:
production:
  adapter: mysql
  database: tacman_production
  username: apache
  password: password
  socket: /var/lib/mysql/mysql.sock
          </textarea>
       </li> <br>
       <li>
        Edit secret key within environment.rb.<br>
        <code>
          cp config/environment.rb.tmpl config/environment.rb<br><br>
        </code>
        Edit the line that starts with "<i>:secret      =></i>".
        You need to change the key to something unique.<br>
       </li> <br>
       <li>
        Copy backgroundrb.yml.tmpl.<br>
        <code>
          cp config/backgroundrb.yml.tmpl config/backgroundrb.yml<br><br>
        </code>
        This is the cron setup file for BackgrounDRB. You may modify your copy if you wish to adjust the schedule.<br>
       </li> <br>
       <li>
         Install the database tables<br>
        <code>rake db:migrate RAILS_ENV=production</code> <br>
        <code>rake backgroundrb:setup RAILS_ENV=production</code> <br>
       </li> <br>
       <li>
         Set up permissions for tacman user<br>
         <code>chown -R apache:apache /var/tacman</code><br>
       </li> <br>
      </ol>

    <br>

    <p>
      <b>Configure Apache</b>
      </p><ol>
        <li>
          Add the following lines to /etc/httpd/conf/httpd.conf<br>
          <code>
          <b><i>64-bit RHEL 5</i></b> <br />
          LoadModule passenger_module /usr/lib64/ruby/gems/1.8/gems/passenger-2.0.2/ext/apache2/mod_passenger.so <br />
          PassengerRoot /usr/lib64/ruby/gems/1.8/gems/passenger-2.0.2 <br />
          PassengerRuby /usr/bin/ruby
          <br /><br />
          <b><i>32-bit RHEL 5</i></b> <br />
          LoadModule passenger_module /usr/lib/ruby/gems/1.8/gems/passenger-2.0.2/ext/apache2/mod_passenger.so <br />
          PassengerRoot /usr/lib/ruby/gems/1.8/gems/passenger-2.0.2 <br />
          PassengerRuby /usr/bin/ruby
         </code>
       </li> <br>
       <li>
         Setup access to the application (/etc/httpd/conf/httpd.conf) <br />
           <textarea cols="80" rows="5" readonly="readonly">
           DocumentRoot "/var/tacman/public"
           RewriteEngine On
           RewriteCond %{HTTPS} off
           RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI}
           &lt;Directory "/var/tacman/public"&gt;
           ...
         </textarea>
       </li> <br>
       <li>
         Configure SSL<br>
         <code>
           mkdir /etc/httpd/ssl <br />
           cd /etc/pki/tls/certs/ <br />
           /usr/bin/openssl genrsa -des3 1024  > /etc/httpd/ssl/apache.key <br />
           /usr/bin/openssl req -new -key /etc/httpd/ssl/apache.key -out /etc/httpd/ssl/apache.csr -set_serial 0 <br />
           /usr/bin/openssl req -new -key /etc/httpd/ssl/apache.key -x509 -days 365 -out /etc/httpd/ssl/apache.crt  <br />
           cat /etc/httpd/ssl/apache.csr >  /etc/httpd/ssl/apache.pem <br />
           echo ""    >> /etc/httpd/ssl/apache.pem <br />
           cat /etc/httpd/ssl/apache.crt >> /etc/httpd/ssl/apache.pem <br />
         </code>
       </li> <br>
       <li>Restart apache</li>
      </ol>
    </p>
    <br>

    <p>
      <b>Set up logrotate to manage logs.</b><br><br>

      edit /etc/logrotate.conf and add the following entries:<br>
<textarea cols="100" rows="7" readonly>
# rotate web logs when they reach 500k
/var/tacman/log/*.log {
    size 500k
    create 0664 apache apache
    rotate 3
}
</textarea>
    </p>
    <br>

    <p>
      <b>Set up cron to restart BackgrounDRb nightly.</b><br><br>
      <code>crontab -u apache -e</code><br />
      <textarea cols="120" rows="7" readonly>
# m h  dom mon dow   command
  4 4  *   *   *     /var/tacman/script/backgroundrb stop; /var/tacman/script/backgroundrb start -e production
      </textarea>

    </p>
    <br>

    <p>
      <b>Modify IPTables</b><br /><br />

      TACACS+ clients expect to send requests to TCP port 49. In order to avoid having to run the Tacacs Daemon script
      as root, iptables will need to be configured to redirect traffic from TCP 49 to a port greater than
      1023. For example, the daemon could be set to bind to TCP 4949 and iptables could then be configured
      to redirect TCP 49 to TCP 4949. <br /><br />

      An example iptables rules file would be:<br />
      <textarea cols="100" rows="40" readonly>
# FILTER TABLE #
*filter
:INPUT DROP [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# allow all to loopback
-A INPUT -d 127.0.0.1/32 -j ACCEPT

# allow inbound icmp
-A INPUT -p icmp -m icmp --icmp-type any -j ACCEPT

# allow inbound ssh
-A INPUT -p tcp -m tcp --dport 22 --syn -j ACCEPT

# allow inbound web
-A INPUT -p tcp -m tcp --dport 80 --syn -j ACCEPT
-A INPUT -p tcp -m tcp --dport 443 --syn -j ACCEPT

# allow inbound tacacs
-A INPUT -p tcp -m tcp --dport 49 --syn -j ACCEPT
-A INPUT -p tcp -m tcp --dport 4949 --syn -j ACCEPT

# allow all established connections back in
-A INPUT -p all -m state --state ESTABLISHED -j ACCEPT

COMMIT


# NAT TABLE #
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# you need to configure the following for each ip (assumes daemons bind to 4949)
-A PREROUTING -p tcp -m tcp --dport 49  -d 127.0.0.1 -j DNAT --to-destination 127.0.0.1:4949

COMMIT
        </textarea><br /><br />
      <b> *IMPORTANT REMINDER -- Using this setup, you will need to remember to configure your daemons to listen on port 4949 instead of the default port
      of 49.</b><br /><br />

    To complete this setup you must enable IP forwarding in the kernel.
    Add the following setting to /etc/sysctl.conf: net.ipv4.ip_forward = 1
    </p>
    <br />

    <p>
      <b>Backing up the database</b><br><br>

      It is a good idea to back up your database from time to time. In order to dump the DB to a text file, run the following:
      <br><br>
      <code><i>mysqldump --add-drop-table -u [username] -p [password] tacman_production &gt; tacman_production.sql</i></code>
      <br>
      <br><br>
      In order to restore the database from backup, run the following:
      <br><br>
      <code><i>mysql -u [username] -p [password] tacman_production &lt; tacman_production.sql</i></code>
    </p>
    <br><br>

    <p>
      <b>Log in to the system</b><br><br>

      To log into the system, visit <i>https://yourserver.here</i> and log in with 'admin', 'password'.
    </p>

    <br>
    <p>
      <b>Periodic updates from subversion</b>
      </p><ol>
      <li>
         Pull update, update db tables, set permissions, restart apache<br>
         <code>cd /var/tacman</code> <br>
         <code>svn update</code> <br>
         <code>rake db:migrate RAILS_ENV=production</code> <br>
         <code>chown -R apache:apache /var/tacman</code><br>
         <code>/etc/init.d/httpd restart</code><br>
       </li> <br>
       <li>
         Restart BackgrounDRb through the web interface<br>
       </li> <br>
      </ol>

    <br>




<br /><br /><br /><br />


